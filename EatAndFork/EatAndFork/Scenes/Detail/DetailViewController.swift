//
//  DetailViewController.swift
//  EatAndFork
//
//  Created by Visarut on 6/7/2566 BE.
//  Copyright (c) 2566 BE Newfml. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailDisplayLogic: AnyObject
{
    func displayData(viewModel: Detail.FetchData.ViewModel)
    func displayAdjustItem(viewModel: Detail.AdjustItem.ViewModel)
    func displayAddItemToCart(viewModel: Detail.AddItemToCart.ViewModel)
}

final class DetailViewController: UIViewController, DetailDisplayLogic {
    var interactor: (DetailBusinessLogic & DetailDataStore)?
    var router: (NSObjectProtocol & DetailRoutingLogic & DetailDataPassing)?
    
    @IBOutlet private weak var menuImageView: UIImageView!
    @IBOutlet private weak var menuLabel: UILabel!
    @IBOutlet private weak var priceLabel: UILabel!
    @IBOutlet private weak var descLabel: UILabel!
    @IBOutlet private weak var websiteButton: UIButton!
    @IBOutlet private weak var addItemContainerView: UIView!
    @IBOutlet private weak var addToCartButton: UIButton!
    @IBOutlet private weak var numberOfItemLabel: UILabel!
    @IBOutlet private weak var totalPriceOfItemLabel: UILabel!
    @IBOutlet private weak var minusItemButton: UIButton!
    @IBOutlet private weak var stepperView: UIStackView!
    @IBOutlet private weak var plusItemButton: UIButton!
    @IBOutlet private weak var numberOfItemInCartLabel: UILabel!
    @IBOutlet private weak var totalPriceOfItemsLabel: UILabel!
    
    
    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: - Setup Clean Code Design Pattern 

    private func setup() {
        let viewController = self
        let interactor = DetailInteractor()
        let presenter = DetailPresenter()
        let router = DetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        
        setupUI()
        interactor?.fetchData(request: .init())
    }
    
    private func setupUI() {
        websiteButton.layer.cornerRadius = 8
        websiteButton.layer.borderWidth = 2
        websiteButton.layer.borderColor = UIColor.appColor(.main)?.cgColor
        websiteButton.tintColor = UIColor.appColor(.main)
        addToCartButton.layer.cornerRadius = 12
        addItemContainerView.layer.cornerRadius = 16
        addItemContainerView.dropShadow(color: .black, opacity: 0.25, offSet: .init(width: 0, height: -1), radius: 8)
        stepperView.layer.cornerRadius = 6
        stepperView.layer.borderWidth = 1.5
        stepperView.layer.borderColor = UIColor.appColor(.placeholder)?.cgColor
    }
    
    //MARK: - receive events from UI
    
    @IBAction private func closeDidTap(_ sender: Any) {
        dismiss(animated: true)
    }
    
    @IBAction private func bowserDidTap(_ sender: Any) {
        router?.routeToBrowser()
    }
    
    @IBAction private func minusItemDidTap(_ sender: Any) {
        interactor?.adjustItem(request: .init(addItem: .minus))
    }
    
    @IBAction private func plusItemDidTap(_ sender: Any) {
        interactor?.adjustItem(request: .init(addItem: .plus))
    }
    
    @IBAction private func addToCartDidTap(_ sender: Any) {
        interactor?.addItemToCart(request: .init())
    }
    
    // MARK: - display view model from DetailPresenter

    func displayData(viewModel: Detail.FetchData.ViewModel) {
        menuImageView.downloaded(from: viewModel.imageUrl, contentMode: .scaleAspectFill)
        menuLabel.text = viewModel.title
        priceLabel.text = viewModel.price
        totalPriceOfItemLabel.text = viewModel.price
        descLabel.text = viewModel.description
        numberOfItemInCartLabel.text = viewModel.numberOfItemsInCart
        totalPriceOfItemsLabel.text = viewModel.totalPrice
    }
    
    func displayAdjustItem(viewModel: Detail.AdjustItem.ViewModel) {
        totalPriceOfItemLabel.text = viewModel.totalItemPrice
        numberOfItemLabel.text = viewModel.numberOfItem.description
        minusItemButton.tintColor = viewModel.numberOfItem <= 1 ? UIColor.appColor(.placeholder) : UIColor.appColor(.main)
    }
    
    func displayAddItemToCart(viewModel: Detail.AddItemToCart.ViewModel) {
        dismiss(animated: true)
    }
}
