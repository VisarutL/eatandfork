//
//  MainViewController.swift
//  EatAndFork
//
//  Created by Visarut on 4/7/2566 BE.
//  Copyright (c) 2566 BE Newfml. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainDisplayLogic: AnyObject {
    func displayMenuItems(viewModel: Main.FetchMenus.ViewModel)
}

final class MainViewController: UIViewController, MainDisplayLogic, MainDataPassing {
    private var interactor: MainBusinessLogic?
    private var router: (NSObjectProtocol & MainRoutingLogic & MainDataPassing)?
    @IBOutlet private weak var containerButtonView: UIStackView!
    @IBOutlet private weak var listButton: UIButton!
    @IBOutlet private weak var gridButton: UIButton!
    @IBOutlet private weak var tableView: UITableView!
    @IBOutlet private weak var collectionView: UICollectionView!
    
    var dataStore: MainDataStore?
  
    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: - Setup Clean Code Design Pattern 

    private func setup() {
        let viewController = self
        let interactor = MainInteractor()
        let presenter = MainPresenter()
        let router = MainRouter()
        viewController.interactor = interactor
        viewController.dataStore = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: - Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        setupTableView()
        setupCollecitonView()
        interactor?.fetchMemuItems(request: .init())
    }
    
    private func setupUI() {
//        containerButtonView.layer.cornerRadius = 8
//        let path = UIBezierPath(roundedRect: gridButton.bounds, byRoundingCorners: [.topRight, .bottomRight], cornerRadii: CGSize(width: 8, height: 8))
//        let mask = CAShapeLayer()
//        mask.path = path.cgPath
//        gridButton.layer.mask = mask
        listButton.layer.borderColor = UIColor.red.cgColor
        gridButton.layer.borderWidth = 1
        gridButton.layer.borderColor = UIColor.red.cgColor
    }
    
    private func setupTableView() {
        tableView.register(.init(nibName: "SearchTableViewCell", bundle: nil), forCellReuseIdentifier: SearchTableViewCell.reustIdentifier)
        tableView.register(.init(nibName: "ItemListTableViewCell", bundle: nil), forCellReuseIdentifier: ItemListTableViewCell.reustIdentifier)
        tableView.rowHeight = UITableView.automaticDimension
        tableView.estimatedRowHeight = 44.0
    }
    
    private func setupCollecitonView() {
        let layout = UICollectionViewCompositionalLayout { [weak self] sectionIndex, enviroment in
            switch Main.Section.init(rawValue: sectionIndex) {
            case .search:
                return self?.searchSection()
            case .menus:
                return self?.menuListSection()
            case .none:
                return self?.menuListSection()
            }
        }
        collectionView.setCollectionViewLayout(layout, animated: true)
        collectionView.register(.init(nibName: "SearchCollectionViewCell", bundle: nil), forCellWithReuseIdentifier: SearchCollectionViewCell.reustIdentifier)
        collectionView.register(.init(nibName: "GridItemCollectionViewCell", bundle: nil), forCellWithReuseIdentifier: GridItemCollectionViewCell.reustIdentifier)
    }
    
    private func searchSection() -> NSCollectionLayoutSection {
        let itemSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1), heightDimension: .fractionalHeight(1))
        
        let item = NSCollectionLayoutItem(layoutSize: itemSize)
        
        let groupSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1), heightDimension: .absolute(68.0))
        
        let group = NSCollectionLayoutGroup.horizontal(layoutSize: groupSize, subitems: [item])
        
        let section = NSCollectionLayoutSection(group: group)
        
        return section
    }
    
    private func menuListSection() -> NSCollectionLayoutSection {
        let itemSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1/2), heightDimension: .fractionalHeight(1))
        
        let item = NSCollectionLayoutItem(layoutSize: itemSize)
        
        item.contentInsets = .init(top: 0, leading: 8, bottom: 0, trailing: 8)
        
        let groupSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1), heightDimension: .absolute(164.0))
        
        let group = NSCollectionLayoutGroup.horizontal(layoutSize: groupSize, subitems: [item])
        
        group.contentInsets = .init(top: 8, leading: 8, bottom: 8, trailing: 8)
        
        let section = NSCollectionLayoutSection(group: group)
        
        section.contentInsets = .zero
        
        return section
    }
    
    private func shouldShowListView(isShow: Bool) {
        listButton.backgroundColor = isShow ? UIColor.appColor(.main) : UIColor.appColor(.background)
        listButton.tintColor = isShow ? UIColor.appColor(.background) : UIColor.appColor(.placeholder)
        listButton.layer.borderWidth = isShow ? .zero : 1
        gridButton.backgroundColor = isShow ? UIColor.appColor(.background) : UIColor.appColor(.main)
        gridButton.tintColor = isShow ? UIColor.appColor(.placeholder) : UIColor.appColor(.background)
        gridButton.layer.borderWidth = isShow ? 1 : .zero
        tableView.isHidden = !isShow
        collectionView.isHidden = isShow
    }
    
    //MARK: - receive events from UI
    
    @IBAction private func listButtonDidTap(_ sender: Any) {
        guard tableView.isHidden == true else { return }
        shouldShowListView(isShow: true)
    }
    
    @IBAction private func gridButtonDidTap(_ sender: Any) {
        guard collectionView.isHidden == true else { return }
        shouldShowListView(isShow: false)
    }

    // MARK: - display view model from MainPresenter

    func displayMenuItems(viewModel: Main.FetchMenus.ViewModel) {
        tableView.reloadData()
        collectionView.reloadData()
    }
}

// MARK: - UITableViewDelegate

extension MainViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard let section = Main.Section.init(rawValue: indexPath.section) else { return }
        switch section {
        case .search:
            router?.routeToSearch()
        case .menus:
            print("Item TableView")
        }
    }
}

// MARK: - UITableViewDataSource

extension MainViewController: UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return Main.Section.allCases.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        switch Main.Section.init(rawValue: section) {
        case .search:
            return 1
        case .menus:
            return dataStore?.menuItems.count ?? 0
        case .none:
            return 0
        }
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let section = Main.Section.init(rawValue: indexPath.section) else { return UITableViewCell() }
        switch section {
        case .search:
            guard let cell = tableView.dequeueReusableCell(withIdentifier: SearchTableViewCell.reustIdentifier, for: indexPath) as? SearchTableViewCell else { return UITableViewCell() }
            return cell
        case .menus:
            guard
                let cell = tableView.dequeueReusableCell(withIdentifier: ItemListTableViewCell.reustIdentifier, for: indexPath) as? ItemListTableViewCell,
                let menuItem = dataStore?.menuItems[indexPath.row]
            else {
                return UITableViewCell()
            }
            cell.setupData(menu: menuItem)
            return cell
        }
    }
}

// MARK: - UICollectionViewDelegate

extension MainViewController: UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        guard let section = Main.Section.init(rawValue: indexPath.section) else { return }
        switch section {
        case .search:
            router?.routeToSearch()
        case .menus:
            print("Item CollectionView")
        }
    }
}

// MARK: - UICollectionViewDataSource

extension MainViewController: UICollectionViewDataSource {
    func numberOfSections(in tableView: UICollectionView) -> Int {
        return Main.Section.allCases.count
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        switch Main.Section.init(rawValue: section) {
        case .search:
            return 1
        case .menus:
            return dataStore?.menuItems.count ?? 0
        case .none:
            return 0
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let section = Main.Section.init(rawValue: indexPath.section) else { return UICollectionViewCell() }
        switch section {
        case .search:
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: SearchCollectionViewCell.reustIdentifier, for: indexPath) as? SearchCollectionViewCell else { return UICollectionViewCell() }
            return cell
        case .menus:
            guard
                let cell = collectionView.dequeueReusableCell(withReuseIdentifier: GridItemCollectionViewCell.reustIdentifier, for: indexPath) as? GridItemCollectionViewCell,
                let menuItem = dataStore?.menuItems[indexPath.row]
            else {
                return UICollectionViewCell()
            }
            cell.setupData(menu: menuItem)
            return cell
        }
    }
}
