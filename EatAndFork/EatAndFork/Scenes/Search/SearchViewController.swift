//
//  SearchViewController.swift
//  EatAndFork
//
//  Created by Visarut on 6/7/2566 BE.
//  Copyright (c) 2566 BE Newfml. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchDisplayLogic: AnyObject
{
    func displayFilterMenuItems(viewModel: Search.Filter.ViewModel)
}

final class SearchViewController: UIViewController, SearchDisplayLogic, SearchDataPassing {
    var interactor: SearchBusinessLogic?
    var router: (NSObjectProtocol & SearchRoutingLogic & SearchDataPassing)?
    
    @IBOutlet private weak var backButton: UIButton!
    @IBOutlet private weak var searchView: SearchView!
    @IBOutlet private weak var tableView: UITableView!
    
    private lazy var tableViewDataSource: UITableViewDiffableDataSource<Search.Section, MenuItem> = {
        let datasource = UITableViewDiffableDataSource<Search.Section, MenuItem>(tableView: tableView) { tableView, indexPath, itemIdentifier in
            guard let cell = tableView.dequeueReusableCell(withIdentifier: ItemListTableViewCell.reustIdentifier, for: indexPath) as? ItemListTableViewCell else {
                return UITableViewCell()
            }
            cell.setupData(menu: itemIdentifier)
            return cell
        }
        return datasource
    }()
    
    var dataStore: SearchDataStore?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: - Setup Clean Code Design Pattern
    
    private func setup() {
        let viewController = self
        let interactor = SearchInteractor()
        let presenter = SearchPresenter()
        let router = SearchRouter()
        viewController.interactor = interactor
        viewController.dataStore = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        setupUI()
        setupTableView()
    }
    
    private func setupUI() {
        searchView.delegate = self
    }
    
    private func setupTableView() {
        tableView.register(.init(nibName: "ItemListTableViewCell", bundle: nil), forCellReuseIdentifier: ItemListTableViewCell.reustIdentifier)
        tableView.rowHeight = UITableView.automaticDimension
        tableView.estimatedRowHeight = 44.0
        configureInitalDiffableSnapshot()
    }
    
    private func configureInitalDiffableSnapshot() {
        var snapshot = NSDiffableDataSourceSnapshot<Search.Section, MenuItem>()
        
        snapshot.appendSections([.search])
        snapshot.appendItems(dataStore?.menuItems ?? [], toSection: .search)
        
        tableViewDataSource.apply(snapshot, animatingDifferences: false)
    }
    
    //MARK: - receive events from UI
    
    @IBAction private func backButtonDidTap(_ sender: Any) {
        navigationController?.popViewController(animated: true)
    }

    // MARK: - display view model from SearchPresenter

    func displayFilterMenuItems(viewModel: Search.Filter.ViewModel) {
        var snapshot = NSDiffableDataSourceSnapshot<Search.Section, MenuItem>()
        
        snapshot.appendSections([.search])
        snapshot.appendItems(viewModel.menuItems, toSection: .search)
        
        tableViewDataSource.apply(snapshot, animatingDifferences: true)
    }
}

// MARK: - UITableViewDelegate

extension SearchViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        print("Item TableView \(indexPath)")
    }
}

// MARK: - SearchViewDelegate

extension SearchViewController: SearchViewDelegate {
    func textFieldDidChangeSelection(_ textField: UITextField) {
        interactor?.filterByText(request: .init(text: textField.text ?? ""))
    }
}
