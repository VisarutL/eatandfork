//
//  SummaryViewController.swift
//  EatAndFork
//
//  Created by Visarut on 7/7/2566 BE.
//  Copyright (c) 2566 BE Newfml. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SummaryDisplayLogic: AnyObject
{
    func displayData(viewModel: Summary.FetchData.ViewModel)
}

final class SummaryViewController: UIViewController, SummaryDisplayLogic {
    var interactor: SummaryBusinessLogic?
    var router: SummaryRoutingLogic?
    
    @IBOutlet private weak var tableView: UITableView!
    @IBOutlet private weak var checkoutContainerView: UIView!
    @IBOutlet private weak var checkoutButton: UIButton!
    @IBOutlet private weak var totalPriceLabel: UILabel!
    
    private lazy var tableViewDataSource: UITableViewDiffableDataSource<Summary.Section, Summary.Row> = {
        let datasource = UITableViewDiffableDataSource<Summary.Section, Summary.Row>(tableView: tableView) { tableView, indexPath, itemIdentifier in
            
            switch itemIdentifier {
            case .items(let item):
                guard let cell = tableView.dequeueReusableCell(withIdentifier: SummaryItemListTableViewCell.reuseIdentifier, for: indexPath) as? SummaryItemListTableViewCell else {
                    return UITableViewCell()
                }
                cell.setupData(viewModel: item)
                return cell
            case .priceDetail(let item):
                guard let cell = tableView.dequeueReusableCell(withIdentifier: PriceDetailTableViewCell.reuseIdentifier, for: indexPath) as? PriceDetailTableViewCell else {
                    return UITableViewCell()
                }
                cell.setupData(viewModel: item)
                return cell
            }
        }
        return datasource
    }()
    
    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: - Setup Clean Code Design Pattern 

    private func setup() {
        let viewController = self
        let interactor = SummaryInteractor()
        let presenter = SummaryPresenter()
        let router = SummaryRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
    }

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        
        setupUI()
        setupTableView()
        interactor?.fetchData(request: .init())
    }
    
    private func setupUI() {
        checkoutButton.layer.cornerRadius = 12
        checkoutContainerView.layer.cornerRadius = 16
        checkoutContainerView.dropShadow(color: .black, opacity: 0.25, offSet: .init(width: 0, height: -1), radius: 8)
    }
    
    private func setupTableView() {
        tableView.register(.init(nibName: SummaryItemListTableViewCell.reuseIdentifier, bundle: nil), forCellReuseIdentifier: SummaryItemListTableViewCell.reuseIdentifier)
        tableView.register(.init(nibName: PriceDetailTableViewCell.reuseIdentifier, bundle: nil), forCellReuseIdentifier: PriceDetailTableViewCell.reuseIdentifier)
        tableView.rowHeight = UITableView.automaticDimension
        tableView.estimatedRowHeight = 44.0
        tableView.contentInset = .init(top: 0, left: 0, bottom: 8, right: 0)
    }
    
    //MARK: - receive events from UI
    
    @IBAction private func backDidTap(_ sender: Any) {
        navigationController?.popViewController(animated: true)
    }
    
    @IBAction private func checkoutDidTap(_ sender: Any) {
        router?.routeToThankyou()
    }

    // MARK: - display view model from SummaryPresenter

    func displayData(viewModel: Summary.FetchData.ViewModel) {
        var snapshot = NSDiffableDataSourceSnapshot<Summary.Section, Summary.Row>()
        
        snapshot.appendSections([.items, .priceDetail])
        snapshot.appendItems(viewModel.summaryItemListViewModels, toSection: .items)
        snapshot.appendItems(viewModel.priceDetailViewModels, toSection: .priceDetail)
        
        tableViewDataSource.apply(snapshot, animatingDifferences: true)
        totalPriceLabel.text = viewModel.totalPrice
    }
}

// MARK: - UITableViewDelegate

extension SummaryViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {
        switch Summary.Section.init(rawValue: indexPath.section) {
        case .items:
            let deleteAction = UIContextualAction(style: .destructive, title: nil) {
                (action, sourceView, completionHandler) in
            
                self.interactor?.deleteItem(request: .init(index: indexPath.row))
                completionHandler(true)
            }
            
            let label = UILabel()
            label.text = "ลบเมนู"
            label.textColor = .white
            label.font = UIFont(name: "Mitr-Medium", size: 12.0)
            label.sizeToFit()
            deleteAction.image = UIImage(view: label)
            
            let swipeConfiguration = UISwipeActionsConfiguration(actions: [deleteAction])
            swipeConfiguration.performsFirstActionWithFullSwipe = false
            
            return swipeConfiguration
        case .priceDetail, .none:
            return nil
        }
    }
}
